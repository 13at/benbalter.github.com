// Generated by CoffeeScript 1.4.0
(function() {
  var router,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Application = {
    Models: {},
    Collections: {},
    Views: {},
    router: {},
    url: '{{ site.url }}',
    name: '{{ site.name }}',
    disqus_name: '{{ site.disqus.shortname }}'
  };

  Application.Models.Post = (function(_super) {

    __extends(Post, _super);

    function Post() {
      return Post.__super__.constructor.apply(this, arguments);
    }

    Post.prototype.url = function() {
      return Application.url + "/" + this.id + '.json';
    };

    return Post;

  })(Backbone.Model);

  Application.Models.Page = (function(_super) {

    __extends(Page, _super);

    function Page() {
      return Page.__super__.constructor.apply(this, arguments);
    }

    Page.prototype.url = function() {
      return Application.url + "/" + this.id + '.json';
    };

    return Page;

  })(Backbone.Model);

  Application.Collections.Posts = (function(_super) {

    __extends(Posts, _super);

    function Posts() {
      return Posts.__super__.constructor.apply(this, arguments);
    }

    Posts.prototype.model = Application.Models.Post;

    return Posts;

  })(Backbone.Collection);

  Application.Views.Post = (function(_super) {

    __extends(Post, _super);

    function Post() {
      this.render = __bind(this.render, this);
      return Post.__super__.constructor.apply(this, arguments);
    }

    Post.prototype.el = "#main";

    Post.prototype.tagName = "article";

    Post.prototype["class"] = "post";

    Post.prototype.template = $('#post_template').html();

    Post.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template);
      this.$el.html(compiled(this.model.toJSON()));
      return this.loadDisqus();
    };

    Post.prototype.loadDisqus = function() {
      var dsq;
      window.disqus_shortname = Application.disqus_name;
      window.disqus_identifier = this.model.get('id');
      window.disqus_url = Application.url + '/' + this.model.get('id');
      window.disqus_title = this.model.get('title') + " &raquo; " + Application.name;
      if (typeof DISQUS !== "undefined" && DISQUS !== null) {
        return DISQUS.reset({
          reload: true,
          config: function() {
            this.page.identifier = disqus_identifier;
            this.page.url = disqus_url;
            return this.page.title = disqus_title;
          }
        });
      } else {
        dsq = document.createElement('script');
        dsq.type = 'text/javascript';
        dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        return (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
      }
    };

    return Post;

  })(Backbone.View);

  Application.Views.Page = (function(_super) {

    __extends(Page, _super);

    function Page() {
      this.render = __bind(this.render, this);
      return Page.__super__.constructor.apply(this, arguments);
    }

    Page.prototype.el = "#main";

    Page.prototype.tagName = "article";

    Page.prototype["class"] = "page";

    Page.prototype.template = $('#page_template').html();

    Page.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template);
      this.$el.html(compiled(this.model.toJSON()));
      if (typeof DISQUS !== "undefined" && DISQUS !== null) {
        return DISQUS.reset();
      }
    };

    return Page;

  })(Backbone.View);

  Application.Views.Single = (function(_super) {

    __extends(Single, _super);

    function Single() {
      this.render = __bind(this.render, this);
      return Single.__super__.constructor.apply(this, arguments);
    }

    Single.prototype.el = "#content";

    Single.prototype.template = $("#single_layout").html();

    Single.prototype.initialize = function() {
      return this.model.on('change', this.render);
    };

    Single.prototype.render = function() {
      var compiled, post;
      compiled = _.template(this.template);
      this.$el.html(compiled(this.model.toJSON()));
      if (this.model.get('layout') === "post") {
        post = new Application.Views.Post({
          model: this.model
        });
      } else if (this.model.get('layout') === "page") {
        post = new Application.Views.Page({
          model: this.model
        });
      }
      document.title = this.model.get('title') + " &raquo; " + Application.name;
      return post.render();
    };

    return Single;

  })(Backbone.View);

  router = (function(_super) {

    __extends(router, _super);

    function router() {
      return router.__super__.constructor.apply(this, arguments);
    }

    router.prototype.routes = {
      ":year/:month/:day/:slug/": "post",
      ":slug/": "page"
    };

    router.prototype.post = function(year, month, day, slug) {
      var post, view;
      post = new Application.Models.Post({
        id: year + "/" + month + "/" + day + "/" + slug
      });
      view = new Application.Views.Single({
        model: post
      });
      return post.fetch({
        error: this.redirect
      });
    };

    router.prototype.page = function(id) {
      var page, view;
      page = new Application.Models.Page({
        id: id
      });
      view = new Application.Views.Single({
        model: page
      });
      return page.fetch({
        error: this.redirect
      });
    };

    router.prototype.redirect = function() {
      return document.location = Application.url + Backbone.history.fragment;
    };

    return router;

  })(Backbone.Router);

  Application.router = new router();

  Backbone.history.start({
    pushState: true,
    silent: true
  });

  jQuery(document).ready(function() {
    $('a[href^="{{ site.url }}/"]').live('click', function(e) {
      e.preventDefault();
      return Application.router.navigate($(this).attr('href').replace('{{ site.url }}/', ''), true);
    });
    false;
    window.resume_resize = function() {
      return $('.resume .bar').height($('.content').height() - 25);
    };
    $(window).resize(resume_resize);
    return resume_resize();
  });

}).call(this);
