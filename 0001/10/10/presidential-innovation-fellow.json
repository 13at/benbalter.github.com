{"title":"Presidential Innovation Fellow","organization":"Executive Office of the President","section":"Experience","from":"July 2012","to":"Present","location":"Washington, D.C.","category":"resume","robots":"noindex, nofollow","layout":"default","url":"/0001/10/10/presidential-innovation-fellow/","date":"0001-10-10 00:00:00 -0500","id":"/0001/10/10/presidential-innovation-fellow","categories":["resume"],"next":"I'm always intrigued by developers who use the term \"open source\" as a verb. As if a switch could magically be thrown, and via a quick mouse click in the [Danger Zone](http://www.youtube.com/watch?v=V8rZWw9HE7o), a proprietary or purpose-built project quickly morphs into one that's \"open source\".\n\nOpen source is not simply about publishing code. That'd be like saying democracy's simply about the ability to vote. Sure, you can vote, but if your vote doesn't matter because the act is solely symbolic, it's not really democracy. It's just a ruse. Like publishing code, voting is necessary but not sufficient.\n\nOpen source, at its core, is actually not about code, but about connecting people around a shared vision. It's about community building. It's about collaboration. It's about getting a bunch of enthusiastic, like-minded folks in a metaphorical room together, and giving them the resources they need to solve a shared problem and create something of benefit to others, something that none of them would have been able to do alone. It's about building and sharing, not about publishing.\n\nPut another way, open source is not an alternative workflow or development method. It's not as if you can choose between waterfall, agile, and open source means of producing software in a workplace. Instead, it's a overriding philosophy that guides a project. Like forward thinking, simple, interoperable, system oriented, or open standards. It's how you approach a problem from the start, not what you do after you've already solved it.\n\nTo say *\"hey, we've got something decent here, let's take this closed-sourced project and just hit publish\"* misses the mark. Your motivation can't be to seek free labor, as in *\"hey, if developers want to give us their time, great, let's put this out there and see what happens we have nothing to lose\"*, or about sporadically seeking to garner good will from a niche community of dedicated fans. Trust me, an open source developer can smell astroturf a mile a way, and that's exactly how far they'll stay.\n\n**So what makes an open source project truly open source and not simply \"published\"?**\n\n* **Shared Vision** - Open source developers want to get behind a cause. Think of it as analogous to volunteering for a political campaign. They want to know what the project stands for, and where it is going. If they contribute, what will their code be used for in a six months or a year?\n* **Clear Goals** - What's the goal of the project? What's the roadmap look like? Do you trust the community enough to share it? Can they shape that roadmap or is it set in stone?\n* **Active Development** - When's the last public commit? Are you commiting privately, bundling together a release and then blessing the community with your efforts or is development occuring in the open?\n* **Us/Them Mentality** - Is there a class system between paid/unpaid contributors? Are outside contributions handled with equal footing? Are any outside developers delegated authority or given commit access?\n* **Mechanics** - Is it in version control or just a static download? Is the bug tracker public? Can I comment and submit? What about documentation? Is it maintained in a wiki?\n* **Communication** - Can developers communicate directly or must they go through the parent organization? (e.g., announcement verses conversation models)\n* **Purpose-built Code** - Is the code writen for open source? Is it sufficiently documented? Is it modular? Is it specific to the initial usecase or abstracted out to the underlying logic?\n\nAll of the above are underlying principles that drive development from day one, and yet not incompatible with a philosophy that dictates code remains under lock and key until a minimum viable product (MVP) has been reached. They do remain incompatible, however, with a philosophy that says that business as usual can be easily switched mid-stream to a successful open source project by simply not keeping the code secret. \n\nIn the end, it's about [developing a community](http://ben.balter.com/open-source-for-government/#open_source_community_building), not about developing software. You're selling an experience — whether it's scratching a developer's personal itch or giving them the opportunity to change the world. Next time you seek to build something useful, unless it's the recipe for your secret sauce or something so specific as to render it worthless outside the organization's walls, consider [making it open source from the start](http://ben.balter.com/2012/06/26/why-you-should-always-write-software-as-open-source/), and instead seeking to grow a vibrant community around a cause, rather than simply coding a piece of software that happens to not be secret.","previous":"<ul>\n<li>Assisted with drafting, stakeholder outreach, and coordination of the release of <a href='http://www.whitehouse.gov/sites/default/files/omb/egov/digital-government/digital-government.html'>the President’s Digital Government Strategy</a>, a fundamental reimagination of the role of technology in the public sector</li>\n\n<li>In response to presidential mandate requiring the release of open source software, coordinated and led negotiation of contract for code-sharing services including creation of records management plans under both the Federal Records and Presidential Records Acts</li>\n\n<li>Briefed senior White House officials on legal implications and licensing consideration surrounding the creation of government-funded open-source software collaborations</li>\n\n<li>Prepared US Chief Information Officer for public appearances including speech writing, messaging, and creation of multiple HTML5-based presentations</li>\n\n<li>Developed technical roadmap, prototyped, and implemented <a href='https://github.com/GSA/digital-strategy'>first-of-its-kind mechanism</a> for agencies to report progress on the Digital Government Strategy</li>\n</ul>","tags":[],"content":"<p>Described by the US Chief Technology Officer as &#8220;the baddest of the badass innovators,&#8221; and by the White House Director of Digital Strategy as &#8221;<a href='http://www.youtube.com/watch?v=uhtlOYOhE8w#t=51m12s'>lightning in a bottle</a>,&#8221; serve as entrepreneur in residence reimagining the role of technology in brokering the relationship between citizens and government.</p>","related_posts":[{"url":"/0001/03/01/speaking-experience/","title":"Speaking Experience"},{"url":"/0001/03/10/web-development-and-management/","title":"Web Development and Management"},{"url":"/0001/05/01/bachelor-of-arts-political-science/","title":"Bachelor of Arts, Political Science"},{"url":"/0001/05/05/master-of-business-administration-strategic-management-and-public-policy/","title":"Master of Business Administration — Strategic Management and Public Policy\n"},{"url":"/0001/05/10/juris-doctorate-candidate/","title":"Juris Doctorate Candidate"},{"url":"/0001/08/01/chief-technology-officer/","title":"Chief Technology Officer"},{"url":"/0001/08/10/developer-wordpress-document-revisions/","title":"Developer, WordPress Document Revisions"},{"url":"/0001/09/01/new-media-fellow/","title":"New Media Fellow, Office of the Managing Director"},{"url":"/0001/10/01/software-automation-technology-swat-team/","title":"SoftWare Automation &#038; Technology (SWAT) Team, Office of Administration"},{"url":"/0001/10/05/e-government-information-technology/","title":"Fellow, Office of the US Chief Information Officer\n"}]}