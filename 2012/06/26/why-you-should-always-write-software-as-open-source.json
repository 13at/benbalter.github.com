{"author":"Benjamin J. Balter","title":"Why You Should Always Write Software as Open Source, Even When It's Never Going to Be","excerpt":"When you are the only person that's ever going to see something, you're a lot more likely to \"just make it work. Therefore write open source\n","layout":"post","categories":["business","technology"],"tags":[".govs","agile","code","contracting","development","enterprise","gov 2.0","government","IT","open source","procurement","proprietary"],"post_format":[],"related_posts":[{"url":"/2010/09/12/wordpress-resume-plugin/","id":"/2010/09/12/wordpress-resume-plugin","title":"WordPress Resume Plugin"},{"url":"/2010/09/13/new-media-flak-megaphone-vs-cocktail-party/","id":"/2010/09/13/new-media-flak-megaphone-vs-cocktail-party","title":"New Media Flak: Megaphone vs. Cocktail Party"},{"url":"/2010/10/10/does-every-cloud-have-a-silver-lining/","id":"/2010/10/10/does-every-cloud-have-a-silver-lining","title":"Does Every Cloud Have a Silver Lining?"},{"url":"/2010/11/06/removing-the-barriers-to-organizational-agility/","id":"/2010/11/06/removing-the-barriers-to-organizational-agility","title":"Removing the Barriers to Organizational Agility\n"},{"url":"/2010/11/08/what-fourteen-century-apple-pie-teaches-us-about-sharing/","id":"/2010/11/08/what-fourteen-century-apple-pie-teaches-us-about-sharing","title":"What Fourteen-Century Apple Pie Teaches Us About Sharing\n"},{"url":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds/","id":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds","title":"Will Federal Contracting Officers Soon Have Their Heads in the Clouds?\n"},{"url":"/2010/11/29/free-trade-in-china-just-google-it/","id":"/2010/11/29/free-trade-in-china-just-google-it","title":"Free Trade in China? Just Google it."},{"url":"/2010/11/29/twitter-mentions-as-comments/","id":"/2010/11/29/twitter-mentions-as-comments","title":"Twitter Mentions as Comments WordPress Plugin\n"},{"url":"/2010/12/01/the-internet-is-series-of-tubes/","id":"/2010/12/01/the-internet-is-series-of-tubes","title":"The Internet is Series of Tubes (oh, and Tollgates too)\n"},{"url":"/2010/12/20/late-night-infomercials/","id":"/2010/12/20/late-night-infomercials","title":"Late-Night Infomercials: Guaranteed to Extend the 4th Amendment or Your Money Back"}],"url":"/2012/06/26/why-you-should-always-write-software-as-open-source/","date":"2012-06-26 00:00:00 -0400","id":"/2012/06/26/why-you-should-always-write-software-as-open-source","next":"/2012/07/10/the-demise-of-the-dashboard","previous":"/2012/06/02/publishing-government-data-that-developers-will-actually-use","content":"<p><a href=\"http://ben.balter.com/wp-content/uploads/2012/06/mike-holmes.jpeg\"><img src=\"http://ben.balter.com/wp-content/uploads/2012/06/mike-holmes-203x300.jpeg\" alt=\"Unsatisfied with your Contractor?\">{.alignright}</a></p>\n\n<p>There are two kinds of software: cludgy software and open source. Think about it logically. When you (or your organization) is the only person that&#39;s ever going to see something, you&#39;re a lot more likely to &quot;just make it work.&quot; After all, who would ever know? [^1]</p>\n\n<p>But the same logic that applies to sweeping literal dirt under the rug doesn&#39;t apply to writing code. Whereas a rug will always serve to cover the floor, applications evolve over time and code is often constantly reused and repurposed as customers&#39; needs change. Simply put, it&#39;s impossible to predict today where your code is going to be a year from now and it&#39;s in your best interest to plan accordingly.</p>\n\n<p>Open source hedges this risk by distinguishing generic logic (say posting content online) from application-specific customization (say the use-case-specific presentation of that content). Yet when you&#39;re writing with the intention of producing proprietary or one-off code, you do everything in one pass. The true challenge arises when the same problem emerges again in another department, another business unit, or more generally in an even slightly different context. You&#39;re reinventing the wheel. You&#39;re &quot;open sourcing&quot; (even if within your organization). The solution? Always assume your software is going to be open source, even if you know it&#39;s never going to be, and here&#39;s why:</p>\n\n<p><strong>Flexible from the start</strong> - Imagine you building a house and the contractor literally nails down all your furniture at the onset, saying you could always remove it before you sell. You&#39;d almost certainly hire a new contractor. Even if you&#39;re never going to sell the house, you may want to get a new couch, or at the very least change a room&#39;s layout somewhere down the line. Yet software developers do it all the time. We custom build solutions, and then go back and abstract logic to &quot;open source&quot; it as needed. You&#39;re doubling the effort. Keep logic separate from implementation-specific customization, and you&#39;ll have a shared, portable solution from day one. Put another way, your business unit is no way special or unique. The same logic that presents updates about the latest line of widgets to your customers can also be used to update the same customer base about cogs and you should prepare for that potential synergy from day one, even if not immediately realized.</p>\n\n<p>*<em>Modular by design *</em>- Distinguishing unrelated components encourages several coding best practices. In addition to introducing a modular design, meaning additional components could easily be added (or existing components removed) down the line, abstraction often yields objectively more stable and more readably maintainable code due to the abhorrence of the copy-and-paste effect. Put another way, you&#39;re forced to build elegant solutions — the fact that others are not only going to see, but have to be able to use and adapt your code forces you to follow best-practices like name spacing, abstraction, and object oriented programming.</p>\n\n<p><strong>A message to your future self</strong> – Ever go back and look at old code, <a href=\"https://twitter.com/BenBalter/status/209356982983999488\">only to scratch your head</a> as to what&#39;s going on? The same you that may be asking yourself what you were thinking when you got a tattoo five years back, is also going to be asking why you wrote that singleton function five years ago. Yet when you write open source, you mitigate that risk by explaining your code in such a way that others (including your future self) can understand it. In a world of system orientated architectures and ever-changing requirements, the chance that a software project is one-and-done is increasingly rare, not to mention the fact that by failing to properly document, you&#39;re introducing a significant risk of vendor lock in. Your successor will thank you, and so will the person paying the bills.</p>\n\n<p>The reality of today&#39;s business environment is that all software is inherently &quot;open source&quot;, even if the scope of the sharing is limited to an organization. Assume the software is open, needs to be modular, and will be repurposed, and you will save significant costs in the long run. And when you require the same of outside contractors, you get better, more flexible code, and offset the risks of vendor or technology lock in in the long run.</p>\n\n<p>Justice Brandeis is famous for noting that &quot;sunlight is the best disinfectant.&quot; Likewise, the transparency afforded by the open-source ethos produces <a href=\"http://www.coverity.com/library/pdf/coverity-scan-2011-open-source-integrity-report.pdf\">more reliable software</a> –  so why not simply assume your code is going to be open source from the start?</p>\n\n<p>[^1]: The same would apply when you&#39;re buying software and the contractor is under the impression no one outside the organization will ever see the code, and more importantly, the code could never negatively impact the public&#39;s perception of their overall work-product</p>\n\n<p>[2]: &quot;The same would apply when you&#39;re buying software and the contractor is under the impression no one outside the organization will ever see the code, and more importantly, the code could never negatively impact the public&#39;s perception of their overall work-product&quot;</p>\n","path":"_posts/2012-06-26-why-you-should-always-write-software-as-open-source.md"}