{"layout":"none","permalink":"/feed/","related_posts":[],"url":"/feed/","content":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n\t>\n<channel>\n    <title xml:lang=\"en\"></title>\n    <atom:link type=\"application/atom+xml\" href=\"http://ben.balter.com/feed/\" rel=\"self\"/>\n    <link>http://ben.balter.com</link>\n    <pubDate>Tue, 25 Dec 2012 23:01:35 +0000</pubDate>\n    <lastBuildDate>Tue, 25 Dec 2012 23:01:35 +0000</lastBuildDate>\n   \t<language>en-US</language>\n    <description>J.D./M.B.A. Candidate, Open-Source Developer, Gov 2.0 Evangelist </description>\n    <item>\n        <title>Deprecate Management</title>\n        <link>http://ben.balter.com/2012/12/16/deprecate-management/</link>\n        <pubDate>Sun, 16 Dec 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>Open Souce</category>\n        <category>GitHub</category>\n        <category>Collaboration</category>\n        <category>Management</category>\n        <guid isPermaLink=\"false\">/2012/12/16/deprecate-management</guid>\n        <description>&lt;p&gt;There are many aspects to &amp;#8220;making things&amp;#8221; that &lt;a href='http://ben.balter.com/2012/10/19/we-ve-been-trained-to-make-paper/'&gt;open source just does better&lt;/a&gt;. Regardless of if at the end of the day you ship bits or cogs, certain aspects of &amp;#8220;office&amp;#8221; work are universal: ideation, vetting initiatives, resolving conflicts, and shipping product. Now imagine if you had to do all this not across conference tables, but across geographies and timezones. You&amp;#8217;d have a pretty kickass process for sure. Welcome to the world of open source.&lt;/p&gt;\n\n&lt;p&gt;Think about it this way: in the traditional office setting, we use management to facilitate this collaborative building process. Management does many things, but at the most basic level they:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Shuttle Information&lt;/li&gt;\n\n&lt;li&gt;Coordinate across business units&lt;/li&gt;\n\n&lt;li&gt;Align efforts to organazation priorities&lt;/li&gt;\n\n&lt;li&gt;Make sure people do work&lt;/li&gt;\n\n&lt;li&gt;Recruit new people&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This makes sense if you look at the history of the role. In an age when conveying information was onerous, the only way for Adam to tell Becky what he was working on (and thus to ensure Becky was not duplicating efforts) was to stop what he was doing, walk down the hall, and interrupt Becky. So instead of doing this every day, we hire Charlie to facilitate a standing meeting and shuttle that information back and forth. Makes sense.&lt;/p&gt;\n\n&lt;p&gt;But what if when that problem first arose Adam could send Becky an e-mail or an IM or post a update to a shared collaboration space. Do you think they&amp;#8217;d need Charlie in the first place? Would management as we see it today have arisen in an age where technology reduces the friction of collaboration to nearly nil?&lt;/p&gt;\n\n&lt;p&gt;Take the open source community, as a test case, which was afforded just such a unique opportunity. Same problem, same outcome, and (for the most part), no traditional hierarchical structure. How do you overcome the management burden? Transparent, persistent communication — everything from code to decisions happen in the open and are archived for all to see — and pure meritocracy — a bunch of ideas arise and are voted on (through opt-in participation) and the best are seen to fruition.&lt;/p&gt;\n\n&lt;p&gt;But does it &lt;del&gt;blend&lt;/del&gt; scale? WordPress, the open source content management system had nearly 300 individual contributors to its latest release, in just under four months, all working on a single project downloaded more than a million times within days of its release. And there&amp;#8217;s no reason this process has to be limited to software. Collaboration is collaboration.&lt;/p&gt;\n\n&lt;p&gt;So what aspects of the open source process make this management free collaboration possible? Ryan Tomayko &lt;a href='http://tomayko.com/writings/adopt-an-open-source-process-constraints'&gt;outlines&lt;/a&gt; his experience applying the open source philosophy to an entire (for-profit) venture, noting four key features to the system:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;\n&lt;p&gt;&lt;strong&gt;Electronic&lt;/strong&gt;: Discussion, planning, and operations process should use a high fidelity form of electronic communication like email, github.com, or chat with transcripts wherever possible. Avoid meatspace discussion and meetings.&lt;/p&gt;\n&lt;/li&gt;\n\n&lt;li&gt;\n&lt;p&gt;&lt;strong&gt;Available&lt;/strong&gt;: Work should be visible and expose process. Work should have a URL. It should be possible to move backward from a piece of product or a system failure and understand how it came to be that way. Prefer git, issues, pull requests, mailing lists, and chat with transcripts over URL-less mediums.&lt;/p&gt;\n&lt;/li&gt;\n\n&lt;li&gt;\n&lt;p&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;: Almost no part of the product development process requires that one person interrupt another&amp;#8217;s immediate attention or that people be in the same place at the same time, or even that people be in different places at the same time. Even small meetings or short phone calls can wreck flow so consider laying it out in (a thought out) email or sending a pull request instead.&lt;/p&gt;\n&lt;/li&gt;\n\n&lt;li&gt;\n&lt;p&gt;&lt;strong&gt;Lock free&lt;/strong&gt;: Avoid synchronization / lock points when designing process. This is &lt;a href='http://en.wikipedia.org/wiki/Distributed_revision_control'&gt;distributed version control&lt;/a&gt; writ large. We don&amp;#8217;t have a development manager that grants commit bit to repositories before you can do work, or a release manager that approves deploys, or a product manager that approves work on experimental product ideas. Work toward a goal should never be blocked on approval. Push approval/rejection to the review stage or automate it, but surface work early to get feedback.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Granted, this open-source philosophy doesn&amp;#8217;t apply to every workplace, but how much better would the process of &amp;#8220;making things&amp;#8221; be if we could eliminate traditional pain points of managerial friction entirely — conference calls, status meetings, &amp;#8220;sync ups&amp;#8221;, and other non-decisional &amp;#8220;checkins&amp;#8221;. Work happens in the open, rather than hidden away in one-on-one e-mails or behind closed doors, and decisions are made by those who show up to do the work.&lt;/p&gt;\n\n&lt;p&gt;Straddling the line between arguably the world&amp;#8217;s most bureaucratic, hierarchical organization (federal government), and it&amp;#8217;s definitional polar opposite (open source), provides a unique perspective. There are so many aspects to the work day that we do just because it&amp;#8217;s the way thing&amp;#8217;s have been done since the dawn of the industrial revolution, and it puzzles me why nobody&amp;#8217;s stopped to think critically about how these processes could be remained in an age of technology. I need to get this (physical) form approved by Joan? Okay, you just took two people away from doing what they&amp;#8217;re paid to be doing. I have to e-mail someone for the latest version or figure out where we&amp;#8217;re at on this project? Again, just moved someone from high-level to low-level work.&lt;/p&gt;\n\n&lt;p&gt;Granted, not every workplace is apt for such radical egalitarianism, but the buttoned up (offline) world of &amp;#8220;serious&amp;#8221; business could learn a thing or two from open source&amp;#8217;s collaborative experiment. In many respects, organizational friction is no longer a sunk cost, and thus, arguably, so too is management.&lt;/p&gt; </description>\n    </item><item>\n        <title>Why WordPress's next version should just give it a REST already</title>\n        <link>http://ben.balter.com/2012/12/15/why-wordpress-next-version-should-just-give-it-a-rest-already/</link>\n        <pubDate>Sat, 15 Dec 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>WordPress</category>\n        <category>REST</category>\n        <category>API</category>\n        <category>Technology</category>\n        <guid isPermaLink=\"false\">/2012/12/15/why-wordpress-next-version-should-just-give-it-a-rest-already</guid>\n        <description>&lt;p&gt;The internet has a particular way of solving difficult technical challenges. We try a bunch of diverse approaches out, keep only the most elegant, and quickly forget the rest ever happened. That&amp;#8217;s why the Web is the Internet&amp;#8217;s preeminent service (as apposed to say &lt;a href='http://en.wikipedia.org/wiki/Gopher_%28protocol%29'&gt;Gopher&lt;/a&gt;), clicking the logo in the top left corner of almost any site goes to that site&amp;#8217;s homepage, and typing a URL in your browser retrieves that particular page. These aren&amp;#8217;t just design conventions in the sense that a lot of people like them, but rather represent the purposeful result of trial and error.&lt;/p&gt;\n\n&lt;p&gt;Over the past few years, as sites become more mature and even more inter-connected, the internet has been coalescing around one such pattern (known as &lt;a href='http://en.wikipedia.org/wiki/Representational_state_transfer'&gt;REST&lt;/a&gt;). The idea is simple: a URL should uniquely identify the underlying data it represents. If I have a URL, I shouldn&amp;#8217;t need anything else to view or otherwise manipulate the information behind it.&lt;/p&gt;\n\n&lt;p&gt;WordPress, for the most part, does this well. Each post is given a unique permalink (e.g., &lt;code&gt;2012-12-15-why-wordpress...&lt;/code&gt;) that always points to that post. The problem is, however, in WordPress&amp;#8217;s sense, it points to the &lt;em&gt;display&lt;/em&gt; of that content, not the content itself. When editing, for example, that same content may be represented as &lt;code&gt;/wp-admin/post.php?p=1234&lt;/code&gt;, clearly a different URL, and if you&amp;#8217;d like to programmatically access the underlying data (say to build a mobile app, or some sort of external widget), you&amp;#8217;re pretty much SOL in terms of WordPress&amp;#8217;s core vision.&lt;/p&gt;\n\n&lt;p&gt;Why does such a nuance matter? Take a look at the direction the net&amp;#8217;s heading. We&amp;#8217;re separating content (say, the post itself), from the presentation layer that holds it hostage (say the theme&amp;#8217;s template), so that we can use it in many, many different ways without starting from scratch. This goes on behind the scenes in many ways you may not even notice, and that&amp;#8217;s the point. By enabling programatic access of the underlying data, that same post can be read via a mobile app, a feed reader, posted to a social network, or even embedded within another site altogether.&lt;/p&gt;\n\n&lt;p&gt;Websites are quickly becoming the curators of information, not simply the presenters of it. It&amp;#8217;s a return to content management in its purest form. It&amp;#8217;s exposing content as a service, and it&amp;#8217;s coming whether we want it or not.&lt;/p&gt;\n\n&lt;p&gt;WordPress came about as many of these now-standard design conventions were still emerging, and understandably, it doesn&amp;#8217;t exactly embrace them head on. Yet next generation content management systems — not weighed down by history — have an advantage here, and as folks look to build the next generation of websites, they&amp;#8217;re obviously going to be looking to where we&amp;#8217;re going, not where we&amp;#8217;ve been.&lt;/p&gt;\n\n&lt;p&gt;If WordPress wants to stay relevant as a content management platform, the future isn&amp;#8217;t traditional post-and-forget blogging, but rather a concerted effort to once again make content king. We obviously can&amp;#8217;t flip a switch and get there overnight, but a crawl, walk, run over the next version or so can better align the veritable CMS with the reality of what&amp;#8217;s in our collective pipeline:&lt;/p&gt;\n\n&lt;h3 id='crawl'&gt;Crawl&lt;/h3&gt;\n\n&lt;p&gt;At the very least, lets expose all WordPress content in a machine readable format. This once and for all breaks the content-presentation link. We do this with RSS somewhat, but it&amp;#8217;s time to put non-HTML formats on equal footing with HTML in core&amp;#8217;s eyes.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;\n&lt;p&gt;Create a new format (&amp;#8220;feed&amp;#8221; in WordPress parlance) called JSON, and add the necessary rewrite rules such that I can simply add &lt;code&gt;.json&lt;/code&gt; to any post and retrieve the underlying information in a machine readable format. This should contain not only the content of the post and information that would normally be accessible via HTML, but all the fields of the posts table (e.g., date published, date updated, etc.), all the post&amp;#8217;s metadata (custom, post-specific information), and all the associated term objects (tags, categories, etc.). Sure we&amp;#8217;ll need to add a filter or two in their to ensure information folks want private stays private, but from a technical standpoint, we&amp;#8217;re talking a handful of lines of code here.&lt;/p&gt;\n&lt;/li&gt;\n\n&lt;li&gt;\n&lt;p&gt;Extend that format to indexes (archives in WordPress terms). Again, just as above, every list of posts (by date, by associated term, search results) should have the capability to exose the list in that same machine-readable format. This allows for the programatic discovery of information. A little bit harder than #1, but again, nothing crazy here. Pretty basic stuff.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h3 id='walk'&gt;Walk&lt;/h3&gt;\n\n&lt;p&gt;Access to content is half the equation. Allow programatic management of WordPress content as well. Conceptually, this is nothing radical. WordPress allows remote management of content through the &lt;a href='http://en.wikipedia.org/wiki/XML-RPC'&gt;XML-RPC&lt;/a&gt; protocol, a blog-specific format that was designed some 15 years ago. We&amp;#8217;re just talking about an upgrade.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;\n&lt;p&gt;Use the existing &lt;code&gt;admin-ajax&lt;/code&gt; infrastructure to consistently expose administrative functions in a programtic ways. For example, POSTing to &lt;code&gt;admin-ajax.php?action=create&lt;/code&gt; should allow me to create a new post, just as &lt;code&gt;admin-ajax.php?action=update&amp;amp;p=123&lt;/code&gt; or &lt;code&gt;?action=delete&amp;amp;p=1234&lt;/code&gt; should do the same. Again, the basic plumbing&amp;#8217;s already there, it&amp;#8217;s just a matter of abstracting it out and aligning with modern conventions.&lt;/p&gt;\n&lt;/li&gt;\n\n&lt;li&gt;\n&lt;p&gt;Pick a few high-priority pieces of backend functionality to prototype, such as listing posts or editing an existing post, and rather than reloading the entire administrative interface every time I click something, dogfood the services exposed in #1 to update the content dynamically. Put another way, turn the WordPress backend into a full-fledged client-side content administration application, rather than merely part of a blog. Again, nothign radical here. Gmail does this with mail, Twitter does this with Tweets. It&amp;#8217;s time for WordPress to start doing this with posts.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h3 id='run'&gt;Run&lt;/h3&gt;\n\n&lt;p&gt;We may not get there tomorrow, but I know that with a bit of nuance, WordPress can align itself as the platform of the future and tackle the next generation of web-based applications in the &amp;#8220;WordPress way&amp;#8221;. It&amp;#8217;s simply a matter of positioning.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;\n&lt;p&gt;Transparently map the already-exposed permalink endpoints (e.g., &lt;code&gt;2012/12/15/post.json&lt;/code&gt;) to their backend counterparts. This may require a bit of rewriting of the WordPress routings system (to understand &lt;a href='http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods'&gt;HTTP verbs&lt;/a&gt; other than simply GET). At this point, WordPress would expose a fully RESTful API for any content it knows about, but could do so with the traditional WordPress finess.&lt;/p&gt;\n&lt;/li&gt;\n\n&lt;li&gt;\n&lt;p&gt;Add &lt;a href='http://backbonejs.org/'&gt;Backbone&lt;/a&gt; to the default theme (it&amp;#8217;s already used on the backend), and begin to dogfood content on the front end as well as the backend so that clicking a post or page simply retrieves the content, rather than reloading the entire website. There&amp;#8217;s an opportunity to really rethink templating here. Perhaps &lt;code&gt;wp_get_ajax_template&lt;/code&gt; or something converts a WordPress template to an underscore template. Perhaps WordPress compiles everything into JST for me.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;As community members sit down to sketch out what the next version of WordPress looks like, I sincerely hope they can at least think about implementing some of the front-end functionality early on, and maybe even make a prototypical wp-admin 2.0 somewhat of a priority.&lt;/p&gt;\n\n&lt;p&gt;Technology has this tricky way of bringing about organizational change. Making something so dumb-simple really is an empowering force. WordPress did it once as it first set out to democratize publishing, and it&amp;#8217;s time to do it again for the next generation of non-blogging websites and applications.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update (12/20):&lt;/strong&gt; &lt;em&gt;Not quite REST, but as &lt;a href='https://twitter.com/scribu'&gt;@scribu&lt;/a&gt; points out in the comments below, &lt;a href='https://core.trac.wordpress.org/ticket/14618'&gt;#14618&lt;/a&gt; proposed an RPC-like JSON API some two years ago. Looks like the ticket ended up in somewhat over a holy war over standards (XML v. JSON anyone?), but the arguments in favor still stand nonetheless.&lt;/em&gt;&lt;/p&gt; </description>\n    </item><item>\n        <title>We've been trained to make paper</title>\n        <link>http://ben.balter.com/2012/10/19/we-ve-been-trained-to-make-paper/</link>\n        <pubDate>Fri, 19 Oct 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>collaboration</category>\n        <category>Word</category>\n        <category>workflow</category>\n        <category>git</category>\n        <category>GitHub</category>\n        <category>markdown</category>\n        <category>Technology</category>\n        <guid isPermaLink=\"false\">/2012/10/19/we-ve-been-trained-to-make-paper</guid>\n        <description>&lt;p&gt;We&amp;#8217;ve been trained wrong. We&amp;#8217;ve been trained that content creation starts by firing up a desktop word processor — a piece of software, mind you, that still does its best to generate a digital representation of a physical piece of paper — margins, page breaks, and all. Yet this quintessential workplace-place training simply fails to remain relevant in a world where we carry a computer in our pockets at all times. Our training now tells us to create content for the least-likely way it&amp;#8217;s consumed: on paper. We&amp;#8217;re stuck in an anachronistic workflow.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#8217;s not uncommon for example, for a team to need to write or edit a document together. Take the typical collaborative publishing process, which generally goes something like this:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Draft content in Microsoft Word&lt;/li&gt;\n\n&lt;li&gt;Save to shared folder or e-mail around for comments and changes&lt;/li&gt;\n\n&lt;li&gt;Manually (and opaquely) reconsile changes one-by-one&lt;/li&gt;\n\n&lt;li&gt;Repeat steps 2-3 until satisfied with the document&lt;/li&gt;\n\n&lt;li&gt;&lt;strong&gt;Convert to web-friendly format&lt;/strong&gt;&lt;/li&gt;\n\n&lt;li&gt;Publish&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;See what we did there? We&amp;#8217;re still writing content for print, and then only once we&amp;#8217;re completely done, begin to prepare it for web. That&amp;#8217;s broken. That&amp;#8217;s like building an entire car, and then at the last minute, deciding it should actually, in fact, be a plane. If the internet is the primary medium by which content is consumed, shouldn&amp;#8217;t that be the primary medium for which content is written?&lt;/p&gt;\n\n&lt;h3 id='using_the_wrong_tools'&gt;Using the wrong tools&lt;/h3&gt;\n\n&lt;p&gt;Microsoft Word was designed with one purpose in mind: to make paper. Think about it. It&amp;#8217;s essential elements arose in the early 80&amp;#8217;s. There&amp;#8217;s print-centric buttons like left and right align front and center, but new-fangled internety things like hyperlinks or rich media are buried deep inside these labyrinthian sub-menus. Sure, it&amp;#8217;s industry standard, but it&amp;#8217;s an industry-standard workflow that arose before the age of the web (and hasn&amp;#8217;t really changed since).&lt;/p&gt;\n\n&lt;p&gt;Yet the majority of the documents we create today rarely, if ever embody physical space. They don&amp;#8217;t care about the things Microsoft Word cares about — margin width, page breaks, or other properties that assume four sharp corners — and more importantly, they don&amp;#8217;t handle mobile responsiveness, machine-readability, or other web-specific features.&lt;/p&gt;\n\n&lt;h3 id='merely_a_snapshot'&gt;Merely a snapshot&lt;/h3&gt;\n\n&lt;p&gt;And then there&amp;#8217;s the problem of collaborating. I can&amp;#8217;t count the number of times I&amp;#8217;ve been e-mailed a document entitled &lt;code&gt;foo-document_2012_10_15_clean_fixed_revised_final2&lt;/code&gt; or told that it&amp;#8217;s &amp;#8220;on the share drive&amp;#8221; or asked &amp;#8220;are you out yet?&amp;#8221;. Without expensive software, that document&amp;#8217;s just a snapshot in time. There&amp;#8217;s no context. &lt;em&gt;What updates does this version have that weren&amp;#8217;t in the last? Wait is this even the most recent version? Who made the last three revisions? What happened with that change I submitted - did you accept it? Why not? Can we discuss? Can two people edit it at the same time? Not to mention — I have a crazy idea — can I go off and experiment in a parallel version?&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Geeks solved this problem a long time ago. It&amp;#8217;s called version control. We built it in the 70&amp;#8217;s. We start with content, you edit it, I edit it, and we get better content. It&amp;#8217;s really that simple, and better yet, it&amp;#8217;s free. It handles curating the master copy, keeps track of each and every change (down to the character mind you), and even provides a transparent forum to discuss those changes in the context in which they occur. &lt;a href='https://github.com/benbalter/benbalter.github.com/commits/master/posts/_posts/2012-10-19-we-ve-been-trained-to-make-paper.md'&gt;Take a look for yourself&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h3 id='jailbreaking_content'&gt;Jailbreaking content&lt;/h3&gt;\n\n&lt;p&gt;So why doesn&amp;#8217;t everyone use this &amp;#8220;version control&amp;#8221;? Because we&amp;#8217;re trained wrong. We&amp;#8217;ve got to break free of these proprietary, print-only formats. We&amp;#8217;ve got to stop shuttling changes back-and-forth via e-mail or with obscure file names. We&amp;#8217;ve got to unprogram ourselves for an age of print.&lt;/p&gt;\n\n&lt;p&gt;And here&amp;#8217;s why: &lt;em&gt;.doc files are like tiny micro-jails for our content.&lt;/em&gt; Proprietary document formats tend to commingle the text we provide with the commands the software needs to recreate it, and it stores all this in a complicated and inaccessible binary format. That&amp;#8217;s what makes it proprietary. We put text in — one of the most basic things computers understand — and we get this big mess back that can only be opened by that software. Imagine if the most common way to get water was to buy a can of Coke and run in through a Brita filter. It doesn&amp;#8217;t need to be so complicated.&lt;/p&gt;\n\n&lt;h3 id='break_the_habit'&gt;Break the habit&lt;/h3&gt;\n\n&lt;p&gt;Let&amp;#8217;s just concentrate on what matters: the content. When you separate design from content, things get a lot cleaner and a lot easier to work with. From now on, instead of clicking the little blue &amp;#8220;W&amp;#8221; out of habit, ask &amp;#8220;does this really need to be a piece of paper?&amp;#8221; If not, all of a sudden you can now use the best collaboration tools that mankind has made to date, rather than publishing tools that were made for a bygone generation.&lt;/p&gt;\n\n&lt;p&gt;And it&amp;#8217;s not that hard. You can just click &amp;#8220;edit&amp;#8221; below (as an example), or the next project that comes across your plate, give git a try:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href='https://gist.github.com/3914310'&gt;Learn&lt;/a&gt; Markdown - it takes 30 seconds. Honestly.&lt;/li&gt;\n\n&lt;li&gt;&lt;a href='https://github.com/signup/free'&gt;Signup&lt;/a&gt; for a GitHub account - it&amp;#8217;s free!&lt;/li&gt;\n\n&lt;li&gt;Install &lt;a href='http://mac.github.com/'&gt;GitHub for Mac&lt;/a&gt; (or &lt;a href='http://windows.github.com/'&gt;GitHub for Windows&lt;/a&gt;) and &lt;a href='http://mouapp.com/'&gt;Mou&lt;/a&gt;&lt;/li&gt;\n\n&lt;li&gt;Create a repository and go to work&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Granted some of the tools can be a bit rough around the edges at times, they are getting better, and like lots of other open-source technologies before it, as we move from paper-first to a web-only distribution, the time is ripe for a more evolved, text-centric, distributed workflow to become mainstream. &lt;em&gt;Stop making paper, start collaborating.&lt;/em&gt;&lt;/p&gt; </description>\n    </item><item>\n        <title>Open Source is not a verb</title>\n        <link>http://ben.balter.com/2012/10/15/open-source-is-not-a-verb/</link>\n        <pubDate>Mon, 15 Oct 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>open source</category>\n        <category>collaboration</category>\n        <category>proprietary</category>\n        <category>community building</category>\n        <category>Technology</category>\n        <guid isPermaLink=\"false\">/2012/10/15/open-source-is-not-a-verb</guid>\n        <description>&lt;p&gt;I&amp;#8217;m always intrigued by developers who use the term &amp;#8220;open source&amp;#8221; as a verb. As if a switch could magically be thrown, and via a quick mouse click in the &lt;a href='http://www.youtube.com/watch?v=V8rZWw9HE7o'&gt;Danger Zone&lt;/a&gt;, a proprietary or purpose-built project quickly morphs into one that&amp;#8217;s &amp;#8220;open source&amp;#8221;.&lt;/p&gt;\n\n&lt;p&gt;Open source is not simply about publishing code. That&amp;#8217;d be like saying democracy&amp;#8217;s simply about the ability to vote. Sure, you can vote, but if your vote doesn&amp;#8217;t matter because the act is solely symbolic, it&amp;#8217;s not really democracy. It&amp;#8217;s just a ruse. Like publishing code, voting is necessary but not sufficient.&lt;/p&gt;\n\n&lt;p&gt;Open source, at its core, is actually not about code, but about connecting people around a shared vision. It&amp;#8217;s about community building. It&amp;#8217;s about collaboration. It&amp;#8217;s about getting a bunch of enthusiastic, like-minded folks in a metaphorical room together, and giving them the resources they need to solve a shared problem and create something of benefit to others, something that none of them would have been able to do alone. It&amp;#8217;s about building and sharing, not about publishing.&lt;/p&gt;\n\n&lt;p&gt;Put another way, open source is not an alternative workflow or development method. It&amp;#8217;s not as if you can choose between waterfall, agile, and open source means of producing software in a workplace. Instead, it&amp;#8217;s a overriding philosophy that guides a project. Like forward thinking, simple, interoperable, system oriented, or open standards. It&amp;#8217;s how you approach a problem from the start, not what you do after you&amp;#8217;ve already solved it.&lt;/p&gt;\n\n&lt;p&gt;To say &lt;em&gt;&amp;#8220;hey, we&amp;#8217;ve got something decent here, let&amp;#8217;s take this closed-sourced project and just hit publish&amp;#8221;&lt;/em&gt; misses the mark. Your motivation can&amp;#8217;t be to seek free labor, as in &lt;em&gt;&amp;#8220;hey, if developers want to give us their time, great, let&amp;#8217;s put this out there and see what happens we have nothing to lose&amp;#8221;&lt;/em&gt;, or about sporadically seeking to garner good will from a niche community of dedicated fans. Trust me, an open source developer can smell astroturf a mile a way, and that&amp;#8217;s exactly how far they&amp;#8217;ll stay.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;So what makes an open source project truly open source and not simply &amp;#8220;published&amp;#8221;?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Shared Vision&lt;/strong&gt; - Open source developers want to get behind a cause. Think of it as analogous to volunteering for a political campaign. They want to know what the project stands for, and where it is going. If they contribute, what will their code be used for in a six months or a year?&lt;/li&gt;\n\n&lt;li&gt;&lt;strong&gt;Clear Goals&lt;/strong&gt; - What&amp;#8217;s the goal of the project? What&amp;#8217;s the roadmap look like? Do you trust the community enough to share it? Can they shape that roadmap or is it set in stone?&lt;/li&gt;\n\n&lt;li&gt;&lt;strong&gt;Active Development&lt;/strong&gt; - When&amp;#8217;s the last public commit? Are you commiting privately, bundling together a release and then blessing the community with your efforts or is development occuring in the open?&lt;/li&gt;\n\n&lt;li&gt;&lt;strong&gt;Us/Them Mentality&lt;/strong&gt; - Is there a class system between paid/unpaid contributors? Are outside contributions handled with equal footing? Are any outside developers delegated authority or given commit access?&lt;/li&gt;\n\n&lt;li&gt;&lt;strong&gt;Mechanics&lt;/strong&gt; - Is it in version control or just a static download? Is the bug tracker public? Can I comment and submit? What about documentation? Is it maintained in a wiki?&lt;/li&gt;\n\n&lt;li&gt;&lt;strong&gt;Communication&lt;/strong&gt; - Can developers communicate directly or must they go through the parent organization? (e.g., announcement verses conversation models)&lt;/li&gt;\n\n&lt;li&gt;&lt;strong&gt;Purpose-built Code&lt;/strong&gt; - Is the code writen for open source? Is it sufficiently documented? Is it modular? Is it specific to the initial usecase or abstracted out to the underlying logic?&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;All of the above are underlying principles that drive development from day one, and yet not incompatible with a philosophy that dictates code remains under lock and key until a minimum viable product (MVP) has been reached. They do remain incompatible, however, with a philosophy that says that business as usual can be easily switched mid-stream to a successful open source project by simply not keeping the code secret.&lt;/p&gt;\n\n&lt;p&gt;In the end, it&amp;#8217;s about &lt;a href='http://ben.balter.com/open-source-for-government/#open_source_community_building'&gt;developing a community&lt;/a&gt;, not about developing software. You&amp;#8217;re selling an experience — whether it&amp;#8217;s scratching a developer&amp;#8217;s personal itch or giving them the opportunity to change the world. Next time you seek to build something useful, unless it&amp;#8217;s the recipe for your secret sauce or something so specific as to render it worthless outside the organization&amp;#8217;s walls, consider &lt;a href='http://ben.balter.com/2012/06/26/why-you-should-always-write-software-as-open-source/'&gt;making it open source from the start&lt;/a&gt;, and instead seeking to grow a vibrant community around a cause, rather than simply coding a piece of software that happens to not be secret.&lt;/p&gt; </description>\n    </item><item>\n        <title>Open Source for Government</title>\n        <link>http://ben.balter.com/2012/10/09/open-source-for-government/</link>\n        <pubDate>Tue, 09 Oct 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>open source</category>\n        <category>collaboration</category>\n        <category>government</category>\n        <category>gov20</category>\n        <category>gov 2.0</category>\n        <category>community building</category>\n        <category>how to</category>\n        <category>Technology</category>\n        <guid isPermaLink=\"false\">/2012/10/09/open-source-for-government</guid>\n        <description>&lt;p&gt;I encourage you to read through &lt;a href='http://ben.balter.com/open-source-for-government/'&gt;Open Source for Government&lt;/a&gt;, a collaborative resource for government employees looking to participate in the open source community.&lt;/p&gt;\n\n&lt;p&gt;Also please feel free to &lt;a href='https://github.com/benbalter/open-source-for-government'&gt;fork and contribute&lt;/a&gt; (no technical knowledge necessary).&lt;/p&gt; </description>\n    </item><item>\n        <title>Welcome to the Post-CMS World</title>\n        <link>http://ben.balter.com/2012/10/01/welcome-to-the-post-cms-world/</link>\n        <pubDate>Mon, 01 Oct 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>WordPress</category>\n        <category>Jekyll</category>\n        <category>GitHub</category>\n        <category>benchmarking</category>\n        <category>benchmarks</category>\n        <category>Technology</category>\n        <guid isPermaLink=\"false\">/2012/10/01/welcome-to-the-post-cms-world</guid>\n        <description>&lt;p&gt;You may notice things are bit snappier around here these days, having &lt;a href='https://github.com/benbalter/wordpress-to-jekyll-exporter'&gt;recently converted&lt;/a&gt; the site from WordPress, to &lt;a href='https://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt;.&lt;sup id='fnref:1'&gt;&lt;a href='#fn:1' rel='footnote'&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;Jekyll is a blog-aware static site generator — heavily integrated with the social code sharing service GitHub — the move to which, was primarily motivated by a desire to embrace the brave new, &lt;a href='http://developmentseed.org/blog/2012/07/27/build-cms-free-websites/'&gt;post-CMS world&lt;/a&gt; we now find ourselves in. While WordPress is great, &lt;a href='http://cl.ly/image/1M420a152e1z'&gt;130 outages over the past six months (totalling more than a day&amp;#8217;s worth of downtime)&lt;/a&gt;, left a bit to be desired in terms of hosting.&lt;/p&gt;\n\n&lt;p&gt;Although powered by the open-source CMS WordPress, the old site (shared hosting provided by Bluehost) for performance sake, would actually just served flat HTML and Javscript files from disk (generated on a regular basis by an industry-standard plugin known as &lt;a href='http://wordpress.org/extend/plugins/w3-total-cache/'&gt;W3 Total Cache&lt;/a&gt;), but fired up WordPress on every request (on top of the already slugish Apache).&lt;/p&gt;\n\n&lt;p&gt;Don&amp;#8217;t get me wrong. WordPress can be &lt;a href='http://wordpress.org/extend/plugins/batcache/'&gt;configured to fly&lt;/a&gt; given the right setup, and that&amp;#8217;s exactly what I set out to do. I got the best of the best. I spun up a shiny new AWS box, got Nginx with microcache up and running, APC for opcode, page, and object cache, and even put everything behind Varnish.&lt;/p&gt;\n\n&lt;p&gt;But as much as it pains the developer in me, just like fixies, PBR, and Javascript, static sites are back in style. Reduce the complexity, push it to the edge, and let the visitor&amp;#8217;s browser call APIs directly to generate any dynamic content you may need. Same functionality, same experience, no headache.&lt;/p&gt;\n\n&lt;p&gt;The pitch is straightforward. It leads to simple, flexible, and reliable websites that allow for a renewed focus on what actually matters: the content. Dave Cole over at &lt;a href='http://developmentseed.org/'&gt;Development Seed&lt;/a&gt; (also powered by Jekyll) &lt;a href='http://developmentseed.org/blog/2012/07/27/build-cms-free-websites/'&gt;put it best&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;In the past, building websites with features like consistent templates and lists of aggregated content meant setting up complex content management systems. These CMSs consisted of templating logic, application code, and content databases so they could assemble webpages each time they were requested by site visitors. They were complicated systems that depend on many separate applications working together, like a web server to route page requests to a PHP application that uses pre-defined page layout templates to format content that’s stored in a MySQL database. Serving a page request required at least three separate applications all working together — any one failing would bring down the system&amp;#8230;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;From open source frameworks like Drupal, Wordpress, and Expression Engine to multi-million dollar proprietary applications that the government and big corporations procure from companies that also build tanks and battle ships, these systems produce the same exact output: HTML, CSS, and JavaScript files that web browsers know how to format into the webpages we see. Additional features like RSS or JSON API feeds are just new templates for the same content, and backend workflow modules like those for embedded media and handling email notifications are really separate systems that introduce complexity when integrated with the publishing system.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And then there&amp;#8217;s cost. Putting aside the value of time for a moment, shared hosting&amp;#8217;s going to run you in the ballpark of $7 a month; AWS starts at $14, plus the cost of bandwidth and storage; and Jekyll, if hosted by GitHub? Free.&lt;sup id='fnref:2'&gt;&lt;a href='#fn:2' rel='footnote'&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;I stood up the three options side-by-side, and ran them through the riggors of a performance testing tool humerously called &lt;a href='http://www.joedog.org/siege-home/'&gt;Siege&lt;/a&gt;, the results of which can be found below.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#8217;m still unpacking some of the boxes of bytes, so if you notice something that doesn&amp;#8217;t seem right, feel free to &lt;a href='https://github.com/benbalter/benbalter.github.com/issues'&gt;open an issue&lt;/a&gt;, or better yet, like what you see, feel free to &lt;a href='https://github.com/benbalter/benbalter.github.com'&gt;fork and contribute&lt;/a&gt;. Embracing somewhat of a crawl, walk, run, or fail-fast philosohpy, next up is &lt;a href='https://github.com/benbalter/benbalter.github.com/blob/js/_plugins/generate-json.rb'&gt;outputting the pages as JSON&lt;/a&gt; and relying on Backbone to do the heavy lifting.&lt;/p&gt;\n\n&lt;p&gt;Is it the &lt;a href='http://presidential-innovation-fellows.github.com/mygov/'&gt;first shots&lt;/a&gt; &lt;a href='http://presidential-innovation-fellows.github.com/rfpez-blog/'&gt;of a static-site&lt;/a&gt; &lt;a href='http://presidential-innovation-fellows.github.com/bluebutton/'&gt;revolution&lt;/a&gt;? Time will tell.&lt;/p&gt;\n\n&lt;p&gt;The CMS is dead. Long live the CMS.&lt;/p&gt;\n&lt;hr /&gt;\n&lt;h2 id='the_results'&gt;The Results&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;WARNING: Geek Content!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h3 id='homepage'&gt;Homepage&lt;/h3&gt;\n\n&lt;p&gt;Command: &lt;code&gt;siege -c 20 -t 30S -b ben.balter.com&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The first test was to benchmark the homepage, the most heavily trafficed page on the site. Given 30 seconds of continuous traffic from 20 concurrent users, Bluehost was able to serve a meager 40 users. AWS managed an impressive 2000 users during that same time period (a 50x performance improvement), and did so twice as fast. Enter Jekyll with more than 2600 users (65x increase), responding on average to each in less than a quarter of a second.&lt;/p&gt;\n\n&lt;h4 id='shared_hosting_bluehost'&gt;Shared Hosting (Bluehost)&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;Transactions:\t\t          40 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.54 secs\nData transferred:\t        0.68 MB\nResponse time:\t\t        0.57 secs\nTransaction rate:\t        1.35 trans/sec\nThroughput:\t\t        0.02 MB/sec\nConcurrency:\t\t        0.78\nSuccessful transactions:          40\nFailed transactions:\t           0\nLongest transaction:\t        0.71\nShortest transaction:\t        0.47&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h4 id='varnish__microcache__page_cache__object_cache_aws'&gt;Varnish + Microcache + Page Cache + Object Cache (AWS)&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;Transactions:\t\t        1954 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.39 secs\nData transferred:\t       13.63 MB\nResponse time:\t\t        0.30 secs\nTransaction rate:\t       66.49 trans/sec\nThroughput:\t\t        0.46 MB/sec\nConcurrency:\t\t       19.80\nSuccessful transactions:        1954\nFailed transactions:\t           0\nLongest transaction:\t        0.92\nShortest transaction:\t        0.06&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h4 id='github_pages'&gt;Github Pages&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;Transactions:\t\t        2629 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.42 secs\nData transferred:\t        2.71 MB\nResponse time:\t\t        0.22 secs\nTransaction rate:\t       89.36 trans/sec\nThroughput:\t\t        0.09 MB/sec\nConcurrency:\t\t       19.86\nSuccessful transactions:        2629\nFailed transactions:\t           0\nLongest transaction:\t        1.38\nShortest transaction:\t        0.06&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3 id='404s'&gt;404s&lt;/h3&gt;\n\n&lt;p&gt;Command: &lt;code&gt;siege -c 20 -t 30S -b ben.balter.com/aaaaaaa/&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The true challenge comes in not from serving a static front page (which is presumably cached by WordPress after the first request), but in what happens when it has to reach into the database to retrieve content, for example, when processing a page that doesn&amp;#8217;t exist.&lt;sup id='fnref:3'&gt;&lt;a href='#fn:3' rel='footnote'&gt;3&lt;/a&gt;&lt;/sup&gt; Bluehost squeezed out a single response each second, AWS just over 50, and Jekyll didn&amp;#8217;t flinch at 80.&lt;/p&gt;\n\n&lt;h4 id='shared_hosting_bluehost'&gt;Shared Hosting (Bluehost)&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;Transactions:\t\t          30 hits\nAvailability:\t\t       21.43 %\nElapsed time:\t\t       29.58 secs\nData transferred:\t        0.19 MB\nResponse time:\t\t       14.93 secs\nTransaction rate:\t        1.01 trans/sec\nThroughput:\t\t        0.01 MB/sec\nConcurrency:\t\t       15.14\nSuccessful transactions:           0\nFailed transactions:\t         110\nLongest transaction:\t       22.88\nShortest transaction:\t        0.00&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h4 id='varnish__microcache__page_cache__object_cache_aws'&gt;Varnish + Microcache + Page Cache + Object Cache (AWS)&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;Transactions:\t\t        1567 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.13 secs\nData transferred:\t       14.71 MB\nResponse time:\t\t        0.37 secs\nTransaction rate:\t       53.79 trans/sec\nThroughput:\t\t        0.50 MB/sec\nConcurrency:\t\t       19.83\nSuccessful transactions:           0\nFailed transactions:\t           0\nLongest transaction:\t        1.13\nShortest transaction:\t        0.00&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h4 id='github_pages'&gt;Github Pages&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;Transactions:\t\t        2373 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.82 secs\nData transferred:\t       10.48 MB\nResponse time:\t\t        0.25 secs\nTransaction rate:\t       79.58 trans/sec\nThroughput:\t\t        0.35 MB/sec\nConcurrency:\t\t       19.92\nSuccessful transactions:           0\nFailed transactions:\t           0\nLongest transaction:\t        1.42\nShortest transaction:\t        0.00&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3 id='uptime'&gt;Uptime&lt;/h3&gt;\n\n&lt;p&gt;The other concern was uptime. With the AWS route you may get the performance, but with all that complexity, it&amp;#8217;s increasingly more like that something would go wrong, harder to diagnose and resolve, and unlike shared or managed hosting, if your site goes down at 3:00 am, the only person to call is yourself. (no thanks.)&lt;/p&gt;\n\n&lt;p&gt;With Jekyll, because the files are simply sitting on the server, absent a catastrophic failure, when things go wrong with Jekyll, it simply keeps serving the old content.&lt;sup id='fnref:4'&gt;&lt;a href='#fn:4' rel='footnote'&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n\n&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;\n\n&lt;p&gt;It&amp;#8217;s cheaper, it&amp;#8217;s faster, it&amp;#8217;s simpler, it&amp;#8217;s worry free, and in my opinion, it&amp;#8217;s the future. Welcome to the post-CMS world.&lt;/p&gt;\n&lt;div class='footnotes'&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id='fn:1'&gt;\n&lt;p&gt;Not to be confused with &lt;a href='http://www.youtube.com/watch?v=Q7H_L5cYkg8'&gt;The Jackal&lt;/a&gt;.&lt;/p&gt;\n&lt;a href='#fnref:1' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:2'&gt;\n&lt;p&gt;That&amp;#8217;s free as in speech &lt;strong&gt;and&lt;/strong&gt; free as in beer.&lt;/p&gt;\n&lt;a href='#fnref:2' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:3'&gt;\n&lt;p&gt;Requesting a page that doesn&amp;#8217;t exist will require WordPress to run multiple database queries to attempt to find the page, a request that would most likely not be cached in the event that the 404 was sent in error.&lt;/p&gt;\n&lt;a href='#fnref:3' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:4'&gt;\n&lt;p&gt;GitHub&amp;#8217;s build queue has been backing up every once in a while as of late, but if a change isn&amp;#8217;t instantanous, I&amp;#8217;m okay with that.&lt;/p&gt;\n&lt;a href='#fnref:4' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; </description>\n    </item><item>\n        <title>Government's Release of Federally Funded Source Code: Public Domain or Open Source? Yes.</title>\n        <link>http://ben.balter.com/2012/07/26/government-release-of-source-code-public-domain-or-open-source/</link>\n        <pubDate>Thu, 26 Jul 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>.govs</category>\n        <category>code</category>\n        <category>contracting</category>\n        <category>copyright</category>\n        <category>enterprise</category>\n        <category>federal</category>\n        <category>gov 2.0</category>\n        <category>government</category>\n        <category>gpl</category>\n        <category>IT</category>\n        <category>licensing</category>\n        <category>open government</category>\n        <category>open source</category>\n        <category>procurement</category>\n        <category>Law</category>\n        <category>Technology</category>\n        <guid isPermaLink=\"false\">/2012/07/26/government-release-of-source-code-public-domain-or-open-source</guid>\n        <description>&lt;p&gt;A petition was recently posted on &lt;a href='https://petitions.whitehouse.gov/'&gt;We The People&lt;/a&gt; demanding &lt;a href='https://petitions.whitehouse.gov/petition/maximize-public-benefit-federal-technology-sharing-government-developed-software-under-open-source/6n5ZBBwf?utm_source=wh.gov&amp;amp;utm_medium=shorturl&amp;amp;utm_campaign=shorturl'&gt;that federally funded software be released under an open source license&lt;/a&gt;. Makes sense. The public should have access to what is technically their property.&lt;/p&gt;\n\n&lt;p&gt;However, &lt;a href='http://www.techdirt.com/articles/20120723/12181319800/should-software-created-federal-govt-be-open-source-licensed-public-domain.shtml'&gt;TechDirt posed the question&lt;/a&gt; of whether it should be released under an open-source license or public domain, and I&amp;#8217;m afraid they really missed the point.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#8217;s no doubt in my mind that the creator of the petition was simply asking the question &amp;#8220;I can haz source code?&amp;#8221; Plain and simple. Put it in context: 99% of the time when an organization (or an individual) releases software to the public, they do so under the terms of an open source license. It tells users what they can and can&amp;#8217;t do, and tells contributors under what terms they can contribute. It&amp;#8217;s set&amp;#8217;s the ground rules. It&amp;#8217;s a contract with the public. It&amp;#8217;s a prenup for code.&lt;/p&gt;\n\n&lt;p&gt;So what&amp;#8217;s the issue? Although I generally dread the phrase, in this case, government is objectively different. Under 17 U.S.C § 105 US Government Works are not subject to domestic copyright protection. It&amp;#8217;s not technically public domain, but it&amp;#8217;s close enough. &lt;sup id='fnref:1'&gt;&lt;a href='#fn:1' rel='footnote'&gt;1&lt;/a&gt;&lt;/sup&gt; Any US citizen can use the code any way they wish. There&amp;#8217;s simply no copyright, thus no need to license. &lt;sup id='fnref:2'&gt;&lt;a href='#fn:2' rel='footnote'&gt;2&lt;/a&gt;&lt;/sup&gt; And this entire debate is a moot point if the software is a derivative work of a viral license like the GPL, the most common open source license. &lt;sup id='fnref:3'&gt;&lt;a href='#fn:3' rel='footnote'&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;That of course, only applies to code created by a US government employee, an increasingly rare occurrence. &lt;sup id='fnref:4'&gt;&lt;a href='#fn:4' rel='footnote'&gt;4&lt;/a&gt;&lt;/sup&gt; Absent permission from the contracting officer, the US government retains unlimited rights for all work created under contract (including the right to redistribute). &lt;sup id='fnref:5'&gt;&lt;a href='#fn:5' rel='footnote'&gt;5&lt;/a&gt;&lt;/sup&gt; And again a moot point if GPL derivative (and thus must be given to the Government under the GPL.)&lt;/p&gt;\n\n&lt;p&gt;Yet all this is very academic (not to mention dry). Waldo Jaquith and Anil Dash &lt;a href='https://twitter.com/anildash/statuses/227476701599391744'&gt;made a great suggestion&lt;/a&gt;: let&amp;#8217;s be pragmatic here. Government doesn&amp;#8217;t hold on to software because they are concerned about licensing. They hold on to software because they have better things to do, because it&amp;#8217;s not within the culture, and because there&amp;#8217;s no angry mob slamming a battering ram against the metaphorical front gates when they don&amp;#8217;t.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#8217;t think the nuances of federal procurement law is even close to the first thing we should care about here. &lt;sup id='fnref:6'&gt;&lt;a href='#fn:6' rel='footnote'&gt;6&lt;/a&gt;&lt;/sup&gt; The concern is about whether feds should do the leg work to open source it or not. The question for us as developers, for the thought leaders in the space, isn&amp;#8217;t how should the US government best license / not license software, but &lt;em&gt;how can the open source community help it to do so.&lt;/em&gt; How can we get more software out the door? In a world of finite time, &lt;em&gt;how can we make open sourcing&lt;/em&gt; &lt;sup id='fnref:7'&gt;&lt;a href='#fn:7' rel='footnote'&gt;7&lt;/a&gt;&lt;/sup&gt; &lt;em&gt;a bonafide priority&lt;/em&gt;?&lt;/p&gt;\n\n&lt;p&gt;How? For one, involvement in existing open source projects &lt;sup id='fnref:8'&gt;&lt;a href='#fn:8' rel='footnote'&gt;8&lt;/a&gt;&lt;/sup&gt; would surely send a strong message that there&amp;#8217;s latent demand here, and would give the foot soldiers political air cover to forge onward with their efforts. For another, taking ownership of the code itself, and realizing it is &lt;em&gt;our&lt;/em&gt; code, not the government&amp;#8217;s would surely change the tone of the debate by encouraging agencies to ship code sooner, rather than delaying release out of fear of criticism.&lt;/p&gt;\n\n&lt;p&gt;Put simply, it&amp;#8217;s about what role we are going to play, not what rights we are going to receive. Let&amp;#8217;s at least get the source code, then we can go back to our regularly scheduled holy wars over licensing.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;As always, &lt;a href='http://ben.balter.com/fine-print/'&gt;views are my own&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;\n&lt;div class='footnotes'&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id='fn:1'&gt;\n&lt;p&gt;I&amp;#8217;d argue that all software, even government funded software should still be licensed under a traditional open source license, to resolve any legal ambiguity when used abroad under the terms of various international copyright treaties and agreements&lt;/p&gt;\n&lt;a href='#fnref:1' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:2'&gt;\n&lt;p&gt;Although citizen-contributions to that project would theoretically not be public domain, thus necessitating a license, which should be clarified in the project&amp;#8217;s documentation at the time of release to avoid potential issues with 21 U.S.C. § 1342.&lt;/p&gt;\n&lt;a href='#fnref:2' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:3'&gt;\n&lt;p&gt;Although again, technically speaking the project as a whole would be licensed under GPL, individual code not dependent on the parent project could be used as a US Government Work.&lt;/p&gt;\n&lt;a href='#fnref:3' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:4'&gt;\n&lt;p&gt;Unless you&amp;#8217;re looking at the &lt;a href='https://github.com/languages/ColdFusion'&gt;vibrant open source cold fusion community&lt;/a&gt;.&lt;/p&gt;\n&lt;a href='#fnref:4' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:5'&gt;\n&lt;p&gt;FAR 52.227-14(c)(1)(i). Even if the contracting officer grants such rights, they do not take effect unless the contractor includes a copyright notice at the time of delivery, acknowledging the government&amp;#8217;s sponsorship and indicating the contract number under which it was procured. See FAR 27.404(a)(5).&lt;/p&gt;\n&lt;a href='#fnref:5' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:6'&gt;\n&lt;p&gt;General counsels across government already have enough ammunition to stymy progress.&lt;/p&gt;\n&lt;a href='#fnref:6' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:7'&gt;\n&lt;p&gt;Often the last and least seen step in the enterprise development process.&lt;/p&gt;\n&lt;a href='#fnref:7' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;li id='fn:8'&gt;\n&lt;p&gt;There&amp;#8217;s been &lt;a href='http://ben.balter.com/2012/04/15/cfpb-accepts-first-citizen-submitted-pull-request-on-behalf-of-federal-government/'&gt;exactly one pull request to date&lt;/a&gt; across all government github repos.&lt;/p&gt;\n&lt;a href='#fnref:8' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; </description>\n    </item><item>\n        <title>The Demise of the Personal Dashboard</title>\n        <link>http://ben.balter.com/2012/07/10/the-demise-of-the-dashboard/</link>\n        <pubDate>Tue, 10 Jul 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>.govs</category>\n        <category>analytics</category>\n        <category>dashboard</category>\n        <category>enterprise</category>\n        <category>gov 2.0</category>\n        <category>government</category>\n        <category>KPIs</category>\n        <category>start ups</category>\n        <category>ui</category>\n        <category>ui/ux</category>\n        <category>ux</category>\n        <category>wordpress</category>\n        <category>Technology</category>\n        <guid isPermaLink=\"false\">/2012/07/10/the-demise-of-the-dashboard</guid>\n        <description>&lt;p&gt;&lt;a href='http://ben.balter.com/wp-content/uploads/2012/07/dashboard-all-the-things.jpeg'&gt;&lt;img alt='Dashboard all the things' class='alignright' src='http://ben.balter.com/wp-content/uploads/2012/07/dashboard-all-the-things-300x225.jpeg' /&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I was recently asked how I would architect a personalized dashboard experience for visitors to a large, customer-facing website. My response? &lt;em&gt;I wouldn&amp;#8217;t.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;A dashboard in a car or airplane makes sense. It&amp;#8217;s not as if I could click &amp;#8220;speedometer&amp;#8221; while driving or press the &amp;#8220;altimeter&amp;#8221; button while flying. I simply need everything at all times. But virtual interfaces don&amp;#8217;t have that same limitation. In fact they don&amp;#8217;t have any limitations. A dashboard can have as much information as the most ambitious engineer can dream — and that&amp;#8217;s exactly the problem.&lt;/p&gt;\n\n&lt;p&gt;Put it in context: Google &lt;a href='http://googleblog.blogspot.com/2012/07/spring-cleaning-in-summer.html'&gt;recently announced the retirement of iGoogle&lt;/a&gt;, it&amp;#8217;s own personalized dashboard, and I second their nomination to induct dashboards into the #doingitwrong hall of fame, joining the likes of internet portals, splash pages, and well, basically anything involving ActiveX or Flash.&lt;/p&gt;\n\n&lt;p&gt;Dashboard were a fun user interface experiment. They really were, especially compared to the static pages they evolved from. That was the whole point of Web 2.0, wasn&amp;#8217;t it? Personalization? I mean, it was really cool to drag and drop widgets, and build a virtual command center to monitor my little corner of the internet, and that was fine when there wasn&amp;#8217;t much internet out there to monitor. But the web collectively hit a tipping point a few years back. From push notifications to always-on e-mail, in more ways than we imagine, we now bombard ourselves with more information that we can physically process at any given moment. &lt;a href='http://www.apple.com/iphone/features/retina-display.html'&gt;Quite literally&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Think about it this way: when customers come to a website, they&amp;#8217;re not looking to solve 10 problems. They&amp;#8217;re looking to solve one. They don&amp;#8217;t want all the potentially relevant information thrown at them all at once; they just want what they need. And they want computers to make that determination for them. But hey, this isn&amp;#8217;t the first time those who predict our user experience needs have erred on the side of &lt;a href='http://www.pocket-lint.com/images/dynamic/NEWS-32125-b3a8b509bc5e3a074f7f240f57d71aa9.jpg'&gt;moar is better&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;So that&amp;#8217;s it? That&amp;#8217;s the end of simultaneous streams? &lt;a href='http://www.informationweek.com/news/software/productivity_apps/240003296'&gt;Far from it&lt;/a&gt;. This once-disruptive technology now has a long journey down the Technology S Curve as it becomes the go-to solution for all the business intelligence and project analyst types that stumble across it, in other words, the late adopters.&lt;/p&gt;\n\n&lt;p&gt;Don&amp;#8217;t get me wrong. I&amp;#8217;m sure guilty of building &lt;a href='http://my.fcc.gov/'&gt;a dashboard&lt;/a&gt; or &lt;a href='http://codex.wordpress.org/Dashboard_Screen'&gt;two&lt;/a&gt; in my day. I&amp;#8217;m not saying that they&amp;#8217;ve never had a place. What I&amp;#8217;m saying is that today, not even the most complex dashboard could give you an accurate snapshot of its genus&amp;#8217;s future. If not dashes, then what? Beyond turning everything into a ubiquitous search box (&lt;em&gt;a la&lt;/em&gt; &lt;a href='http://gov.uk'&gt;gov.uk&lt;/a&gt;), I&amp;#8217;m far from for a UI/UX expert, but I tend to think that startups generally have a pretty good sense of what&amp;#8217;s next. They have to. If they don&amp;#8217;t get it right the first time around, they tend not to have a second try. So what do we see?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;\n&lt;p&gt;&lt;strong&gt;Activity -&lt;/strong&gt; Social apps like Facebook, Twitter, Foursquare, even GitHub are all built around the concept of activity. Whether its a news feed, recent checkins, or even commit activity, the question I come with is &amp;#8220;what&amp;#8217;s going on?&amp;#8221; and it gets answered as in depth as I care to scroll through, not as in depth as an engineer arbitrarily decided I needed a few years back. It&amp;#8217;s linear. It&amp;#8217;s &lt;a href='http://en.wikipedia.org/wiki/Inverted_pyramid'&gt;inverted pyramid&lt;/a&gt;. It&amp;#8217;s customized by whom or what I follow, not by what I add or (re)arrange.&lt;/p&gt;\n&lt;/li&gt;\n\n&lt;li&gt;\n&lt;p&gt;&lt;strong&gt;Minimal&lt;/strong&gt; – Productivity apps like Gmail, Google Reader, even dropbox don&amp;#8217;t summarize for me how many e-mails, unread posts, or free MB I have as soon as I log in, and with the exception of a few labs features here or there, don&amp;#8217;t even give me the option to have anything more than a bare-bones inbox, unread feed, or directory listing. In fact, GMail and Google Reader were recently criticized for &lt;a href='http://jonoscript.wordpress.com/2012/04/26/gmail-designer-arrogance-and-the-cult-of-minimalism/'&gt;going a bit too far&lt;/a&gt; in this direction. But the lesson is the same: just give me my stuff and get out of the way.&lt;/p&gt;\n&lt;/li&gt;\n\n&lt;li&gt;\n&lt;p&gt;&lt;strong&gt;Immediate&lt;/strong&gt; - Transactional apps, like Uber or Square focus on action, not the past (or even the present). When I open the Uber or square apps, I&amp;#8217;m immediately presented with the ability to request a vehicle or swipe a card, not my top tasks, not an arbitrary array of options or metrics, not with recent news about the product or popular add-ons. The app simply stands at attention, awaiting orders. I actually had to dig a bit to find my transaction history and related business analytics, and I&amp;#8217;d argue that&amp;#8217;s a really good thing.&lt;/p&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Think about the last time you&amp;#8217;ve used a drag-and-drop dashboard: If you&amp;#8217;re like me, it&amp;#8217;s going to be either Google Analytics or WordPress, and if that&amp;#8217;s the case, it&amp;#8217;s simply known as &lt;em&gt;the screen you see after you log in, but before you can do what you need to do&lt;/em&gt;. It&amp;#8217;s wasted pixels. It&amp;#8217;s cruft from a bygone era when clicks were expensive and developers were left wondering &amp;#8220;how can we fit more on a page&amp;#8221;.&lt;/p&gt;\n\n&lt;p&gt;Options are a crutch. It&amp;#8217;s the natural tendency of any engineer to over engineer a system, and that tendency is even stronger in a risk-averse, top-down culture &lt;a href='http://www.google.com/?q=dashboard+site:.gov'&gt;like government&lt;/a&gt;. But your job — as an engineer, as a product manager, as user — is to push back, to fight that urge, to make &lt;a href='http://wordpress.org/about/philosophy/'&gt;decisions, not options&lt;/a&gt;. Not convinced? That feature you can&amp;#8217;t &lt;a href='https://github.com/blog/1091-spring-cleaning'&gt;bring yourself to cut&lt;/a&gt;? Expose it through your API and see how many users complain.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#8217;s no longer a question of &amp;#8220;is this possible technologically?&amp;#8221;. It&amp;#8217;s no longer a matter of &amp;#8220;can you expose me to that information 24/7?&amp;#8221;. Ever since the advent of &lt;a href='http://html5zombo.com/'&gt;Zombo com&lt;/a&gt;, the only limit is our imagination. We&amp;#8217;ve figured out the hard stuff. It&amp;#8217;s not centralization and personalization. It&amp;#8217;s decentralization and interoperability. Simplicity is the new black.&lt;/p&gt; </description>\n    </item><item>\n        <title>Why You Should Always Write Software as Open Source, Even When It's Never Going to Be</title>\n        <link>http://ben.balter.com/2012/06/26/why-you-should-always-write-software-as-open-source/</link>\n        <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>.govs</category>\n        <category>agile</category>\n        <category>code</category>\n        <category>contracting</category>\n        <category>development</category>\n        <category>enterprise</category>\n        <category>gov 2.0</category>\n        <category>government</category>\n        <category>IT</category>\n        <category>open source</category>\n        <category>procurement</category>\n        <category>proprietary</category>\n        <category>Business</category>\n        <category>Technology</category>\n        <guid isPermaLink=\"false\">/2012/06/26/why-you-should-always-write-software-as-open-source</guid>\n        <description>&lt;p&gt;&lt;a href='http://ben.balter.com/wp-content/uploads/2012/06/mike-holmes.jpeg'&gt;&lt;img alt='Unsatisfied with your Contractor?' class='alignright' src='http://ben.balter.com/wp-content/uploads/2012/06/mike-holmes-203x300.jpeg' /&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;There are two kinds of software: cludgy software and open source. Think about it logically. When you (or your organization) is the only person that&amp;#8217;s ever going to see something, you&amp;#8217;re a lot more likely to &amp;#8220;just make it work.&amp;#8221; After all, who would ever know? &lt;sup id='fnref:1'&gt;&lt;a href='#fn:1' rel='footnote'&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;But the same logic that applies to sweeping literal dirt under the rug doesn&amp;#8217;t apply to writing code. Whereas a rug will always serve to cover the floor, applications evolve over time and code is often constantly reused and repurposed as customers&amp;#8217; needs change. Simply put, it&amp;#8217;s impossible to predict today where your code is going to be a year from now and it&amp;#8217;s in your best interest to plan accordingly.&lt;/p&gt;\n\n&lt;p&gt;Open source hedges this risk by distinguishing generic logic (say posting content online) from application-specific customization (say the use-case-specific presentation of that content). Yet when you&amp;#8217;re writing with the intention of producing proprietary or one-off code, you do everything in one pass. The true challenge arises when the same problem emerges again in another department, another business unit, or more generally in an even slightly different context. You&amp;#8217;re reinventing the wheel. You&amp;#8217;re &amp;#8220;open sourcing&amp;#8221; (even if within your organization). The solution? Always assume your software is going to be open source, even if you know it&amp;#8217;s never going to be, and here&amp;#8217;s why:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Flexible from the start&lt;/strong&gt; - Imagine you building a house and the contractor literally nails down all your furniture at the onset, saying you could always remove it before you sell. You&amp;#8217;d almost certainly hire a new contractor. Even if you&amp;#8217;re never going to sell the house, you may want to get a new couch, or at the very least change a room&amp;#8217;s layout somewhere down the line. Yet software developers do it all the time. We custom build solutions, and then go back and abstract logic to &amp;#8220;open source&amp;#8221; it as needed. You&amp;#8217;re doubling the effort. Keep logic separate from implementation-specific customization, and you&amp;#8217;ll have a shared, portable solution from day one. Put another way, your business unit is no way special or unique. The same logic that presents updates about the latest line of widgets to your customers can also be used to update the same customer base about cogs and you should prepare for that potential synergy from day one, even if not immediately realized.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Modular by design&lt;/strong&gt;- Distinguishing unrelated components encourages several coding best practices. In addition to introducing a modular design, meaning additional components could easily be added (or existing components removed) down the line, abstraction often yields objectively more stable and more readably maintainable code due to the abhorrence of the copy-and-paste effect. Put another way, you&amp;#8217;re forced to build elegant solutions — the fact that others are not only going to see, but have to be able to use and adapt your code forces you to follow best-practices like name spacing, abstraction, and object oriented programming.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;A message to your future self&lt;/strong&gt; – Ever go back and look at old code, &lt;a href='https://twitter.com/BenBalter/status/209356982983999488'&gt;only to scratch your head&lt;/a&gt; as to what&amp;#8217;s going on? The same you that may be asking yourself what you were thinking when you got a tattoo five years back, is also going to be asking why you wrote that singleton function five years ago. Yet when you write open source, you mitigate that risk by explaining your code in such a way that others (including your future self) can understand it. In a world of system orientated architectures and ever-changing requirements, the chance that a software project is one-and-done is increasingly rare, not to mention the fact that by failing to properly document, you&amp;#8217;re introducing a significant risk of vendor lock in. Your successor will thank you, and so will the person paying the bills.&lt;/p&gt;\n\n&lt;p&gt;The reality of today&amp;#8217;s business environment is that all software is inherently &amp;#8220;open source&amp;#8221;, even if the scope of the sharing is limited to an organization. Assume the software is open, needs to be modular, and will be repurposed, and you will save significant costs in the long run. And when you require the same of outside contractors, you get better, more flexible code, and offset the risks of vendor or technology lock in in the long run.&lt;/p&gt;\n\n&lt;p&gt;Justice Brandeis is famous for noting that &amp;#8220;sunlight is the best disinfectant.&amp;#8221; Likewise, the transparency afforded by the open-source ethos produces &lt;a href='http://www.coverity.com/library/pdf/coverity-scan-2011-open-source-integrity-report.pdf'&gt;more reliable software&lt;/a&gt; – so why not simply assume your code is going to be open source from the start?&lt;/p&gt;\n&lt;div class='footnotes'&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li id='fn:1'&gt;\n&lt;p&gt;The same would apply when you&amp;#8217;re buying software and the contractor is under the impression no one outside the organization will ever see the code, and more importantly, the code could never negatively impact the public&amp;#8217;s perception of their overall work-product&lt;/p&gt;\n&lt;a href='#fnref:1' rev='footnote'&gt;&amp;#8617;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; </description>\n    </item><item>\n        <title>Publishing Government Data That Developers Will Actually Use\n</title>\n        <link>http://ben.balter.com/2012/06/02/publishing-government-data-that-developers-will-actually-use/</link>\n        <pubDate>Sat, 02 Jun 2012 00:00:00 +0000</pubDate>\n        <dc:creator>Benjamin J. Balter</dc:creator>\n        <category>.govs</category>\n        <category>analytics</category>\n        <category>api</category>\n        <category>apis</category>\n        <category>data</category>\n        <category>dogfooding</category>\n        <category>enterprise</category>\n        <category>federal</category>\n        <category>geospacial</category>\n        <category>gov 2.0</category>\n        <category>government</category>\n        <category>IT</category>\n        <category>json</category>\n        <category>Oauth</category>\n        <category>open data</category>\n        <category>open government</category>\n        <category>REST</category>\n        <category>RESTful</category>\n        <category>web services</category>\n        <category>xml</category>\n        <category>Technology</category>\n        <guid isPermaLink=\"false\">/2012/06/02/publishing-government-data-that-developers-will-actually-use</guid>\n        <description>&lt;p&gt;&lt;a href='http://www.governmentciomagazine.com'&gt;&lt;img alt='' class='alignright' src='http://ben.balter.com/wp-content/uploads/2012/06/government-cio-magazine-june-2012.png' /&gt;&lt;/a&gt;Despite increasing public support (as well as a number of executive mandates) publishing public data in a machine-readable format is not as simple as pressing the &amp;#8220;publish&amp;#8221; button. Why? Equally important as exposing the information itself is fostering a vibrant developer ecosystem around it. By making the publishing agency, not the public, responsible for making information immediately useful, government can lower the barriers associated with consuming its data and introduce additional citizen services at little to no cost to the agency.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1. Garbage in, garbage out.&lt;/strong&gt; Good, clean data may be surprisingly difficult to come by, especially when working with government systems that have been coupled together over decades. Data standards and conventions change, mechanisms of data collection evolve, and the data itself may be interpreted differently as new policies are introduced. As a result consistent practices, like naming conventions or data formats, often go overlooked. Where practical, take steps to normalize the data prior to release, rather than pushing the responsibility off to be inefficiently repeated by each application individually.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2. Eat your own dog food.&lt;/strong&gt; When organizations consume the products they create, they empirically deliver better, more reliable, and more innovative products. You&amp;#8217;d never seek to buy a car from a dealer that&amp;#8217;s never driven one, yet we often expect the public to build applications based on APIs (Application Programming Interfaces – how computers talk to one another) published by organizations that have never had to consume their own data. Rather than solving the same problem twice, start by exposing all relevant data through public APIs and then work backward to build internal applications that rely on those externally facing data feeds.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;3. Data as a citizen service.&lt;/strong&gt;It is tempting to try and meet open data benchmarks, at least on face, by publishing snapshots of large datasets. Yet multi-gigabyte database exports do little to encourage external development, especially when such data-dumps are delayed and infrequent. Imagine the usefulness of a Facebook feed that showed your friends&amp;#8217; activity from last month. Datasets should be directly exposed so that the public has access to live, real-time data, either in its entirety, or through proper access controls. This not only allows agencies to deliver more useful information, but also reduces the need to store the same data in multiple formats and in multiple locations.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;4. Curate discrete pieces of data.&lt;/strong&gt;APIs are most useful when they do the heavy lifting for those consuming them, especially in terms of sifting through large amounts of data. In practical terms that means returning data to the most discrete level possible, be it a single row, rather than merely returning a subset of the dataset, or even returning a single cell. Seemingly obvious but often overlooked, a query for the broadband speeds at a given address, for example, should return only the data relating to that address, not the entire city or even state-wide dataset. By allowing developers to query the data directly that means they will need less development time on their end, and thus a higher likelihood that an application will be built.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;5. Serve data in multiple formats.&lt;/strong&gt;When providing a service, whether you are a waiter or a CIO, &amp;#8220;the customer is always right.&amp;#8221; In the context of APIs, that means you need to return the information in the developers&amp;#8217; native tongue, not the server&amp;#8217;s. For some languages, heavyweight methods like XML may make sense, for others, especially mobile applications, JSON or JSONP may be preferred. Be prepared to return data in multiple formats, even as those formats continue to evolve.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;6. Minimize the handshake learning curve&lt;/strong&gt;. Authentication may often be necessary, but the pain associated with it does not have to. Ensure that developers can easily register API keys, with minimal effort and without delay, and rely on common authentication frameworks (e.g., OAuth 2.0) to minimize the learning curve. Similarly, whenever practical, provide common API wrappers and other software development kits in multiple languages.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;7. Encourage adoption through documentation.&lt;/strong&gt; Often, the most overlooked aspect of exposing data is documentation. Describe the structure of the data fully, including how to interpret it, and ensure that any technical documentation such as lists of methods and sample code is both complete and accurate. The only thing worse than not having documentation is having wrong documentation. The best APIs even provide Wikis to allow developers to share tools and best practices with one another.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;8. Follow industry standards and convention&lt;/strong&gt;. Although APIs may just be beginning to take foothold in government, a set of best practices have quietly evolved in the private sector over the past several years. What may seem like small, technicalities, such as a truly RESTful API or using proper HTTP methods like GET, POST, PUT, and DELETE, for example, can mean the difference between useful and useless.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;9. Bake in Analytics&lt;/strong&gt;. When it comes to garnering support for future efforts, nothing can be more powerful than raw numbers. From the ground up, bake in analytics on both the application level (what applications are querying the API?), and across APIs on the dataset levels (what APIs are being used?). This will help establish data-driven priorities, such as what type of data may be a good candidate for future APIs.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;10. Location, location, location.&lt;/strong&gt;With the &amp;#8220;consumerization&amp;#8221; of mobile, datasets are increasingly becoming location based. It&amp;#8217;s not what datasets are out there, but rather, what datasets are out there about my immediate world. Likewise, government datasets are increasingly about where, just as much as it is about what. It&amp;#8217;s important that this reality be taken into account when building APIs by incorporating geospatial lookups within the API, such a relying on MongoDB or other location-aware data structures.&lt;/p&gt;\n\n&lt;p&gt;Exposing data as a service is quickly becoming an industry-standard practice. Many popular startups owe their success to the vibrant app communities that surround them, grown simply by lifting some of the burden off of developers&amp;#8217; shoulders. Government agencies may not yet be able to publish data with the mere click of a button, but when done right from the start, exposing additional data sources may be a more trivial task than many expect, and will in turn deliver value to citizens in ways today unimagined by agencies.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;This is an excerpt of an article originally published in the June 2012 issue of &lt;a href='http://www.governmentciomagazine.com'&gt;Government CIO Magazine&lt;/a&gt;.&lt;/em&gt; &lt;strong&gt;&lt;a href='http://www.governmentciomagazine.com/2012/06/ten-steps-publishing-government-data-developers-will-actually-use#blog-content'&gt;Continue Reading →&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; </description>\n    </item>\n</channel>\n</rss>"}